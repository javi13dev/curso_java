poo

Herencia
********************************************
********************************************
********************************************


Todas las clases Java heredan Object.
Si una clase no hereda ninguna otra de forma explícita, implícitamente heredará Object 

ventajas de la herencia: Reutilización de código.

Si tiene un extends, ahora hereda de esa clase.

Al ejecutar el constructor de la clase hija, se ejecuta el constructor de la clase padre.
Es implícita la llamada al constructor sin parámetro ->   super();

	public Punto(int x, int y) {
		this.x=x;
		this.y=y;
	}
	public Punto() {
		x=5;
		y=10;
	}
	
	
	---------->

	public static void main(String[] args) {
		Punto3D pd = new Punto3D(25);
		
		// ahora pd. tiene todos los métodos, tanto de object como de la clase padre Punto.
		pd.imprimir();

	}
	
En el momento de crear pd, se ejecuta el constructor de Punto. Por tanto, el constructor de la clase padre debe estar definida,sino da un error
de compilación.

Si la clase padre NO tiene constructores, java crea un constructor vacío por defecto. En este caso si se crea pd no daría problemas.


super:  para llamar también a métodos de la superclase, cuando por ejemplo hay duplicidad de métodos.
		Si no hay lugar a confusión, podriamos usarlo sin el super.
		
this y super, no sirven para llamar nada estático, a lo estático se le llama con el nombre de la clase . 
Ej:  Clase.metodo()
		
----> Algunas clases no se pueden heredar. 
Las clases final no se pueden heredar.
Ej, los String, las clases envotorio, LocalDate.
(Clases que tienen funcionalidad muy definida)

final: en métodos, supone que no se pueden sobreescribir.





 

Sobrecarga 
********************************************
********************************************
********************************************

De métodos o de constructores.


public void print(int a){
	System.out.println("uno");
}
public void print(String a){
	System.out.println("dos");
}
public void print(int a,int b){
	System.out.println("tres");
}
public void print(long r){
	System.out.println("cuatro");
}

print(25);  //imprime uno 











Sobreescritura
********************************************
********************************************
********************************************


Volver a escribir el método, respetando la estructura
	
	// método imprimir de la clase padre
	
	public void imprimir() {
		System.out.print("Las coordenadas son: "+x+","+y);
	}

	// para sobreescribir métodos, en source>override/implementsmethods
	
	@Override
	public void imprimir() {
		// Llamada a super porque primero llama al método del padre si es necesario y después lo modificamos/añadimos
		super.imprimir();
		System.out.println(","+z);
	}


Reglas:

- respetar el nombre y la lista de parámetros
- el ámbito public/privado no tiene por qué ser el mismo, pero el posterior debe ser menos restrictivo.	
  Siempre puede ampliarse la visibilidad.
- tipo de devolución, no tiene por qué ser el mismo. Puede ser el mismo o un subtipo del original.

Ej: correcto.

	class C1{
		Number calcular(){
		}
	}
	
	class C2 extends C1{
		Integer calcular(){
		}
	}
	
- sobre excepciones, el método posterior no debe propagar excepciones que no estén definidas en el original.
  Esto no afecta a las excepciones del Runtime.
  
  	class C1{
		public void m(){
		}
	}
	
	class C2 extends C1{
		@override
		public void m() throws IOException{ // Error, al no haber estado declarada en la original.
		}
	}
	
	--------------------
	
  	class C1{
		public void m() throws IOException{
		}
	}
	
	class C2 extends C1{
		@override
		public void m() throws FileNotFoundException{ // correcto, ya que es hija de la exception padre.
		}
	}
  
  
  
  
  
  
  
  

Clases abstractas
********************************************
********************************************
********************************************

Interfaces
********************************************
********************************************
********************************************

Polimorfismo
********************************************
********************************************
********************************************