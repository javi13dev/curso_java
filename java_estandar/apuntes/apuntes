Apuntes:

mvnrepository.com

Se le debe indicar:

ID
Grupo
Versión


Una vez creado el proyecto maven, y generado el POM, hay que indicar dependencies:

	<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	  <modelVersion>4.0.0</modelVersion>
	  <groupId>04_ejemplo_json</groupId>
	  <artifactId>04_ejemplo_json</artifactId>
	  <version>0.0.1-SNAPSHOT</version>
	  <build>
	    <sourceDirectory>src</sourceDirectory>
	    <plugins>
	      <plugin>
	        <artifactId>maven-compiler-plugin</artifactId>
	        <version>3.8.1</version>
	        <configuration>
	          <release>17</release>
	        </configuration>
	      </plugin>
	    </plugins>
	  </build>
	  <dependencies>
>>>>>>>>>>>>>>>>>>>>>>>> aqui se indican las librerias
	  	<dependency>
		    <groupId>com.google.code.gson</groupId>
		    <artifactId>gson</artifactId>
		    <version>2.10.1</version>
		</dependency>
		<dependency>
		    <groupId>org.projectlombok</groupId>
		    <artifactId>lombok</artifactId>
		    <version>1.18.30</version>
		    <scope>provided</scope>
		</dependency>
	  </dependencies>
	</project>
	
	
	
	
	
	
	
	
	
** Para acceder a ficheros desde chrome :

file:///c:/



https://www.el-tiempo.net/api

Proyecto comunidades:

Realizar una aplicación que muestre el nombre de cada comunidad autónoma, y para cada una
mostrará sus provincias y dentro de esta, sus municipios.

Datos:

- Provincia:
	nombre
	int codigo
	CCAA
	
- Municipio:
	nombre
	provincia
	poblacion
	
	
Ej:

Comunidad Madrid:
	Madrid:
		municipio 1
		municipio 2
		....
		
		
		



>>>>>>>>>>> EXAMEN:

java.nio NO
bases de datos NO
ficheros NO
fechas NO
excepciones NO

programación básica, 
herencia,
lambdas,
streams,
diferencias Collection, Listas, Set,
sobreescritura, sobrecarga métodos.
interfaz funcional.
		


// Del ultimo ejercicio:
		
CREATE TABLE `alumnos` (
  `dni` varchar(15) NOT NULL,
  `nombre` varchar(45) DEFAULT NULL,
  `edad` int DEFAULT NULL,
  `nota` double DEFAULT NULL,
  `idCurso` int DEFAULT NULL,
  PRIMARY KEY (`dni`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci


CREATE TABLE `cursos` (
  `idcurso` int NOT NULL,
  `curso` varchar(45) DEFAULT NULL,
  `duracion` int DEFAULT NULL,
  `precio` double DEFAULT NULL,
  PRIMARY KEY (`idcurso`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci




>>>>>>>> Ejercicio: volcar a bbdd las comunidades(cod, nombre), provincias(cod, nombre, comunidad), municipios(cod, nombre, superficie, poblacion,altura, codprovincia)



>>>>>>>>>>>> 10/05

java.util.concurrent: Hay clases como:

CopyOnWriteArrayList<E> (thread seguro), evita bloques sincronizados. Permite trabajar varios hilos sobre el mismo conjunto.

En caso de tablas: ConcurrentMap, equivalente al HashMap pero ThreadSeguro.



















>>>>>>>>>>>>>>>>> 13/05

Capa de presentación Swing

La ejecución será por eventos.



https://docs.oracle.com/en/java/javase/17/docs/api/java.desktop/javax/swing/package-summary.html





